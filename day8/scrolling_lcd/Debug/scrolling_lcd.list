
scrolling_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000610  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000798  08000798  00001798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007b8  080007b8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080007b8  080007b8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007b8  080007b8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007b8  080007b8  000017b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007bc  080007bc  000017bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080007c0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000101a  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005ad  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  000035f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000cf  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018110  00000000  00000000  000037f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001620  00000000  00000000  0001b907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b91f  00000000  00000000  0001cf27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8846  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000344  00000000  00000000  000a888c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a8bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  000a8bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000780 	.word	0x08000780

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000780 	.word	0x08000780

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <main>:
#endif

#include <my_Icd_i2c.h>

int main(void)
{
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b08a      	sub	sp, #40	@ 0x28
 800021c:	af00      	add	r7, sp, #0
	int ret;
	char str[32] = "Anish Vijay Mhaske";
 800021e:	4b17      	ldr	r3, [pc, #92]	@ (800027c <main+0x64>)
 8000220:	463c      	mov	r4, r7
 8000222:	461d      	mov	r5, r3
 8000224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000228:	682b      	ldr	r3, [r5, #0]
 800022a:	461a      	mov	r2, r3
 800022c:	8022      	strh	r2, [r4, #0]
 800022e:	3402      	adds	r4, #2
 8000230:	0c1b      	lsrs	r3, r3, #16
 8000232:	7023      	strb	r3, [r4, #0]
 8000234:	f107 0313 	add.w	r3, r7, #19
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	731a      	strb	r2, [r3, #12]
	SystemInit();
 8000242:	f000 fa19 	bl	8000678 <SystemInit>

	ret = Lcd_Init();
 8000246:	f000 f89f 	bl	8000388 <Lcd_Init>
 800024a:	6238      	str	r0, [r7, #32]
	while(1){
		if(ret){
 800024c:	6a3b      	ldr	r3, [r7, #32]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d0fc      	beq.n	800024c <main+0x34>
			Lcd_Puts(LCD_LINE1, str);
 8000252:	463b      	mov	r3, r7
 8000254:	4619      	mov	r1, r3
 8000256:	2080      	movs	r0, #128	@ 0x80
 8000258:	f000 f8fa 	bl	8000450 <Lcd_Puts>
			for(int i = 0; i<=18 ;i++){
 800025c:	2300      	movs	r3, #0
 800025e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000260:	e008      	b.n	8000274 <main+0x5c>
			Lcd_Scroll();
 8000262:	f000 f91c 	bl	800049e <Lcd_Scroll>
			DelayMs(450);
 8000266:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800026a:	f7ff ffad 	bl	80001c8 <DelayMs>
			for(int i = 0; i<=18 ;i++){
 800026e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000270:	3301      	adds	r3, #1
 8000272:	627b      	str	r3, [r7, #36]	@ 0x24
 8000274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000276:	2b12      	cmp	r3, #18
 8000278:	ddf3      	ble.n	8000262 <main+0x4a>
		if(ret){
 800027a:	e7e7      	b.n	800024c <main+0x34>
 800027c:	08000798 	.word	0x08000798

08000280 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <DelayMs+0x44>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800028e:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <DelayMs+0x48>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a0e      	ldr	r2, [pc, #56]	@ (80002cc <DelayMs+0x4c>)
 8000294:	fba2 2303 	umull	r2, r3, r2, r3
 8000298:	099b      	lsrs	r3, r3, #6
 800029a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	fb02 f303 	mul.w	r3, r2, r3
 80002a4:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002a6:	bf00      	nop
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <DelayMs+0x44>)
 80002aa:	685a      	ldr	r2, [r3, #4]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	1ad2      	subs	r2, r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d3f8      	bcc.n	80002a8 <DelayMs+0x28>
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e0001000 	.word	0xe0001000
 80002c8:	20000000 	.word	0x20000000
 80002cc:	10624dd3 	.word	0x10624dd3

080002d0 <Lcd_Write4BitAndCtrl>:
 */

#include <my_Icd_i2c.h>


void Lcd_Write4BitAndCtrl(uint8_t val) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	I2C_Start();
 80002da:	f000 f94d 	bl	8000578 <I2C_Start>
	I2C_SendSlaveAddr(LCD_SLA_W);
 80002de:	204e      	movs	r0, #78	@ 0x4e
 80002e0:	f000 f976 	bl	80005d0 <I2C_SendSlaveAddr>
	I2C_SendData(val);
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f98c 	bl	8000604 <I2C_SendData>
	I2C_Stop();
 80002ec:	f000 f95a 	bl	80005a4 <I2C_Stop>
}
 80002f0:	bf00      	nop
 80002f2:	3708      	adds	r7, #8
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <Lcd_WriteByte>:

void Lcd_WriteByte(uint8_t rs, uint8_t val) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	460a      	mov	r2, r1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	4613      	mov	r3, r2
 8000306:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	f023 030f 	bic.w	r3, r3, #15
 800030e:	73fb      	strb	r3, [r7, #15]
 8000310:	79bb      	ldrb	r3, [r7, #6]
 8000312:	011b      	lsls	r3, r3, #4
 8000314:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	2b00      	cmp	r3, #0
 800031a:	bf14      	ite	ne
 800031c:	2301      	movne	r3, #1
 800031e:	2300      	moveq	r3, #0
 8000320:	b2db      	uxtb	r3, r3
 8000322:	737b      	strb	r3, [r7, #13]
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 8000324:	7bfa      	ldrb	r2, [r7, #15]
 8000326:	7b7b      	ldrb	r3, [r7, #13]
 8000328:	4313      	orrs	r3, r2
 800032a:	b2db      	uxtb	r3, r3
 800032c:	f043 030c 	orr.w	r3, r3, #12
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ffcc 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 8000338:	2001      	movs	r0, #1
 800033a:	f7ff ffa1 	bl	8000280 <DelayMs>
	Lcd_Write4BitAndCtrl(high | bvrs | BV(LCD_BL));
 800033e:	7bfa      	ldrb	r2, [r7, #15]
 8000340:	7b7b      	ldrb	r3, [r7, #13]
 8000342:	4313      	orrs	r3, r2
 8000344:	b2db      	uxtb	r3, r3
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	b2db      	uxtb	r3, r3
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ffbf 	bl	80002d0 <Lcd_Write4BitAndCtrl>

	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 8000352:	7bba      	ldrb	r2, [r7, #14]
 8000354:	7b7b      	ldrb	r3, [r7, #13]
 8000356:	4313      	orrs	r3, r2
 8000358:	b2db      	uxtb	r3, r3
 800035a:	f043 030c 	orr.w	r3, r3, #12
 800035e:	b2db      	uxtb	r3, r3
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ffb5 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f7ff ff8a 	bl	8000280 <DelayMs>
	Lcd_Write4BitAndCtrl(low | bvrs | BV(LCD_BL));
 800036c:	7bba      	ldrb	r2, [r7, #14]
 800036e:	7b7b      	ldrb	r3, [r7, #13]
 8000370:	4313      	orrs	r3, r2
 8000372:	b2db      	uxtb	r3, r3
 8000374:	f043 0308 	orr.w	r3, r3, #8
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffa8 	bl	80002d0 <Lcd_Write4BitAndCtrl>
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <Lcd_Init>:

// As per 4-bit initialization sequence mentioned HD44780 datasheet fig 24 (page 46)
int Lcd_Init() {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
	// wait for min 15 ms (for 5V)
	DelayMs(20);
 800038e:	2014      	movs	r0, #20
 8000390:	f7ff ff76 	bl	8000280 <DelayMs>
	I2C_Init();
 8000394:	f000 f88e 	bl	80004b4 <I2C_Init>
	// check if lcd is ready
	I2C_Start();
 8000398:	f000 f8ee 	bl	8000578 <I2C_Start>
	int ret = I2C_IsDeviceReady(LCD_SLA_W);
 800039c:	204e      	movs	r0, #78	@ 0x4e
 800039e:	f000 f94f 	bl	8000640 <I2C_IsDeviceReady>
 80003a2:	6078      	str	r0, [r7, #4]
	I2C_Stop();
 80003a4:	f000 f8fe 	bl	80005a4 <I2C_Stop>
	if(!ret)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d101      	bne.n	80003b2 <Lcd_Init+0x2a>
		return 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	e04a      	b.n	8000448 <Lcd_Init+0xc0>

	// attention sequence
	Lcd_Write4BitAndCtrl(LCD_SET_8BIT | BV(LCD_EN));
 80003b2:	2034      	movs	r0, #52	@ 0x34
 80003b4:	f7ff ff8c 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	__NOP();
 80003b8:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_SET_8BIT);
 80003ba:	2030      	movs	r0, #48	@ 0x30
 80003bc:	f7ff ff88 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	DelayMs(5);
 80003c0:	2005      	movs	r0, #5
 80003c2:	f7ff ff5d 	bl	8000280 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_SET_8BIT | BV(LCD_EN));
 80003c6:	2034      	movs	r0, #52	@ 0x34
 80003c8:	f7ff ff82 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	__NOP();
 80003cc:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_SET_8BIT);
 80003ce:	2030      	movs	r0, #48	@ 0x30
 80003d0:	f7ff ff7e 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f7ff ff53 	bl	8000280 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_SET_8BIT | BV(LCD_EN));
 80003da:	2034      	movs	r0, #52	@ 0x34
 80003dc:	f7ff ff78 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	__NOP();
 80003e0:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_SET_8BIT);
 80003e2:	2030      	movs	r0, #48	@ 0x30
 80003e4:	f7ff ff74 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 80003e8:	2003      	movs	r0, #3
 80003ea:	f7ff ff49 	bl	8000280 <DelayMs>

	Lcd_Write4BitAndCtrl(LCD_SET_4BIT | BV(LCD_EN));
 80003ee:	2024      	movs	r0, #36	@ 0x24
 80003f0:	f7ff ff6e 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	__NOP();
 80003f4:	bf00      	nop
	Lcd_Write4BitAndCtrl(LCD_SET_4BIT);
 80003f6:	2020      	movs	r0, #32
 80003f8:	f7ff ff6a 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	DelayMs(3);
 80003fc:	2003      	movs	r0, #3
 80003fe:	f7ff ff3f 	bl	8000280 <DelayMs>

	// lcd initialization
	Lcd_Write4BitAndCtrl(LCD_FN_SET_4BIT_2LINES);
 8000402:	2028      	movs	r0, #40	@ 0x28
 8000404:	f7ff ff64 	bl	80002d0 <Lcd_Write4BitAndCtrl>
	DelayMs(1);
 8000408:	2001      	movs	r0, #1
 800040a:	f7ff ff39 	bl	8000280 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_DISP_CTRL);
 800040e:	2108      	movs	r1, #8
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff ff71 	bl	80002f8 <Lcd_WriteByte>
	DelayMs(1);
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff ff32 	bl	8000280 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_CLEAR);
 800041c:	2101      	movs	r1, #1
 800041e:	2000      	movs	r0, #0
 8000420:	f7ff ff6a 	bl	80002f8 <Lcd_WriteByte>
	DelayMs(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f7ff ff2b 	bl	8000280 <DelayMs>
	Lcd_WriteByte(LCD_CMD, LCD_ENTRY_MODE);
 800042a:	2106      	movs	r1, #6
 800042c:	2000      	movs	r0, #0
 800042e:	f7ff ff63 	bl	80002f8 <Lcd_WriteByte>
	DelayMs(1);
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff ff24 	bl	8000280 <DelayMs>
//	Lcd_WriteByte(LCD_CMD, LCD_SHIFT);
//		DelayMs(1);
	Lcd_WriteByte(LCD_CMD, LCD_DISP_ON);
 8000438:	210c      	movs	r1, #12
 800043a:	2000      	movs	r0, #0
 800043c:	f7ff ff5c 	bl	80002f8 <Lcd_WriteByte>
	DelayMs(1);
 8000440:	2001      	movs	r0, #1
 8000442:	f7ff ff1d 	bl	8000280 <DelayMs>
	return ret;
 8000446:	687b      	ldr	r3, [r7, #4]
}
 8000448:	4618      	mov	r0, r3
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <Lcd_Puts>:

void Lcd_Puts(uint8_t line, char str[]) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	6039      	str	r1, [r7, #0]
 800045a:	71fb      	strb	r3, [r7, #7]
	int i;
	Lcd_WriteByte(LCD_CMD, line);
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	4619      	mov	r1, r3
 8000460:	2000      	movs	r0, #0
 8000462:	f7ff ff49 	bl	80002f8 <Lcd_WriteByte>
	DelayMs(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff ff0a 	bl	8000280 <DelayMs>
	for(i=0; str[i]!='\0'; i++)
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	e00a      	b.n	8000488 <Lcd_Puts+0x38>
		Lcd_WriteByte(LCD_DATA, str[i]);
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	683a      	ldr	r2, [r7, #0]
 8000476:	4413      	add	r3, r2
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	4619      	mov	r1, r3
 800047c:	2001      	movs	r0, #1
 800047e:	f7ff ff3b 	bl	80002f8 <Lcd_WriteByte>
	for(i=0; str[i]!='\0'; i++)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	3301      	adds	r3, #1
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	4413      	add	r3, r2
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1ee      	bne.n	8000472 <Lcd_Puts+0x22>
}
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <Lcd_Scroll>:

//uint8_t Lcd_ShiftByte(char str[]){
//
//}

void Lcd_Scroll(void){
 800049e:	b580      	push	{r7, lr}
 80004a0:	af00      	add	r7, sp, #0
	Lcd_WriteByte(LCD_CMD, LCD_SHIFT);
 80004a2:	2118      	movs	r1, #24
 80004a4:	2000      	movs	r0, #0
 80004a6:	f7ff ff27 	bl	80002f8 <Lcd_WriteByte>
	DelayMs(1);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f7ff fee8 	bl	8000280 <DelayMs>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <I2C_Init>:
Date: Sep 24, 2024
*/

#include <my_i2c.h>

void I2C_Init(void) {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80004b8:	4b2c      	ldr	r3, [pc, #176]	@ (800056c <I2C_Init+0xb8>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a2b      	ldr	r2, [pc, #172]	@ (800056c <I2C_Init+0xb8>)
 80004be:	f043 0302 	orr.w	r3, r3, #2
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER |= (BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1));
 80004c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000570 <I2C_Init+0xbc>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a29      	ldr	r2, [pc, #164]	@ (8000570 <I2C_Init+0xbc>)
 80004ca:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80004ce:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(SCL_PIN*2) | BV(SDA_PIN*2));
 80004d0:	4b27      	ldr	r3, [pc, #156]	@ (8000570 <I2C_Init+0xbc>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a26      	ldr	r2, [pc, #152]	@ (8000570 <I2C_Init+0xbc>)
 80004d6:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 80004da:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR &= ~(BV(SCL_PIN*2+1) | BV(SDA_PIN*2+1) | BV(SCL_PIN*2) | BV(SDA_PIN*2)); // no pull-up/down
 80004dc:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <I2C_Init+0xbc>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a23      	ldr	r2, [pc, #140]	@ (8000570 <I2C_Init+0xbc>)
 80004e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80004e6:	60d3      	str	r3, [r2, #12]

    GPIOB->AFR[0] |= BV(30) | BV(26);
 80004e8:	4b21      	ldr	r3, [pc, #132]	@ (8000570 <I2C_Init+0xbc>)
 80004ea:	6a1b      	ldr	r3, [r3, #32]
 80004ec:	4a20      	ldr	r2, [pc, #128]	@ (8000570 <I2C_Init+0xbc>)
 80004ee:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 80004f2:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] &= ~(BV(31) | BV(29) | BV(28) | BV(27) | BV(25) | BV(24));
 80004f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000570 <I2C_Init+0xbc>)
 80004f6:	6a1b      	ldr	r3, [r3, #32]
 80004f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000570 <I2C_Init+0xbc>)
 80004fa:	f023 433b 	bic.w	r3, r3, #3137339392	@ 0xbb000000
 80004fe:	6213      	str	r3, [r2, #32]


    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000500:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <I2C_Init+0xb8>)
 8000502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000504:	4a19      	ldr	r2, [pc, #100]	@ (800056c <I2C_Init+0xb8>)
 8000506:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800050a:	6413      	str	r3, [r2, #64]	@ 0x40

    I2C1->CR1 = I2C_CR1_SWRST;
 800050c:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <I2C_Init+0xc0>)
 800050e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000512:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000514:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <I2C_Init+0xc0>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]

    I2C1->CR2 |= 16;
 800051a:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <I2C_Init+0xc0>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	4a15      	ldr	r2, [pc, #84]	@ (8000574 <I2C_Init+0xc0>)
 8000520:	f043 0310 	orr.w	r3, r3, #16
 8000524:	6053      	str	r3, [r2, #4]

    I2C1->CCR &= ~I2C_CCR_FS;
 8000526:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <I2C_Init+0xc0>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	4a12      	ldr	r2, [pc, #72]	@ (8000574 <I2C_Init+0xc0>)
 800052c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000530:	61d3      	str	r3, [r2, #28]
    I2C1->CCR |= 80;
 8000532:	4b10      	ldr	r3, [pc, #64]	@ (8000574 <I2C_Init+0xc0>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a0f      	ldr	r2, [pc, #60]	@ (8000574 <I2C_Init+0xc0>)
 8000538:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800053c:	61d3      	str	r3, [r2, #28]

    I2C1->TRISE |= 17;
 800053e:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <I2C_Init+0xc0>)
 8000540:	6a1b      	ldr	r3, [r3, #32]
 8000542:	4a0c      	ldr	r2, [pc, #48]	@ (8000574 <I2C_Init+0xc0>)
 8000544:	f043 0311 	orr.w	r3, r3, #17
 8000548:	6213      	str	r3, [r2, #32]

    I2C1->CR1 |= I2C_CR1_ACK;
 800054a:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <I2C_Init+0xc0>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a09      	ldr	r2, [pc, #36]	@ (8000574 <I2C_Init+0xc0>)
 8000550:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000554:	6013      	str	r3, [r2, #0]

    I2C1->CR1 |= I2C_CR1_PE;
 8000556:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <I2C_Init+0xc0>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a06      	ldr	r2, [pc, #24]	@ (8000574 <I2C_Init+0xc0>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6013      	str	r3, [r2, #0]
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800
 8000570:	40020400 	.word	0x40020400
 8000574:	40005400 	.word	0x40005400

08000578 <I2C_Start>:


void I2C_Start(void){
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_START;
 800057c:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <I2C_Start+0x28>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a07      	ldr	r2, [pc, #28]	@ (80005a0 <I2C_Start+0x28>)
 8000582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000586:	6013      	str	r3, [r2, #0]

	while(!(I2C1->SR1 & I2C_SR1_SB));
 8000588:	bf00      	nop
 800058a:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <I2C_Start+0x28>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <I2C_Start+0x12>
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40005400 	.word	0x40005400

080005a4 <I2C_Stop>:

void I2C_RepeatStart(void){
	I2C_Start();
}

void I2C_Stop(void){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_STOP;
 80005a8:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <I2C_Stop+0x28>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <I2C_Stop+0x28>)
 80005ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005b2:	6013      	str	r3, [r2, #0]

	while(!(I2C1->SR2 & I2C_SR2_BUSY));
 80005b4:	bf00      	nop
 80005b6:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <I2C_Stop+0x28>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <I2C_Stop+0x12>

}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	40005400 	.word	0x40005400

080005d0 <I2C_SendSlaveAddr>:

void I2C_SendSlaveAddr(uint8_t slaveAddr){
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	I2C1->DR = slaveAddr;
 80005da:	4a09      	ldr	r2, [pc, #36]	@ (8000600 <I2C_SendSlaveAddr+0x30>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	6113      	str	r3, [r2, #16]

	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 80005e0:	bf00      	nop
 80005e2:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <I2C_SendSlaveAddr+0x30>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <I2C_SendSlaveAddr+0x12>

	(void)I2C1->SR1;
 80005ee:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <I2C_SendSlaveAddr+0x30>)
 80005f0:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 80005f2:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <I2C_SendSlaveAddr+0x30>)
 80005f4:	699b      	ldr	r3, [r3, #24]

}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	40005400 	.word	0x40005400

08000604 <I2C_SendData>:

void I2C_SendData(uint8_t data){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	while(!(I2C1->SR1 & I2C_SR1_TXE));
 800060e:	bf00      	nop
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <I2C_SendData+0x38>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0f9      	beq.n	8000610 <I2C_SendData+0xc>

	I2C1->DR = data;
 800061c:	4a07      	ldr	r2, [pc, #28]	@ (800063c <I2C_SendData+0x38>)
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	6113      	str	r3, [r2, #16]

	while(!(I2C1->SR1 & I2C_SR1_BTF));
 8000622:	bf00      	nop
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <I2C_SendData+0x38>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0f9      	beq.n	8000624 <I2C_SendData+0x20>

}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40005400 	.word	0x40005400

08000640 <I2C_IsDeviceReady>:
	// read content and clear flags
	uint16_t val = I2C1->DR;
	return val;
}

int I2C_IsDeviceReady(uint8_t slaveAddr) {
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]

	I2C1->DR = slaveAddr;
 800064a:	4a0a      	ldr	r2, [pc, #40]	@ (8000674 <I2C_IsDeviceReady+0x34>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	6113      	str	r3, [r2, #16]

    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000650:	bf00      	nop
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <I2C_IsDeviceReady+0x34>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <I2C_IsDeviceReady+0x12>

    (void)I2C1->SR1;
 800065e:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <I2C_IsDeviceReady+0x34>)
 8000660:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000662:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <I2C_IsDeviceReady+0x34>)
 8000664:	699b      	ldr	r3, [r3, #24]
    return 1;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40005400 	.word	0x40005400

08000678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  DWT_Init();
 800067c:	f000 f802 	bl	8000684 <DWT_Init>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <DWT_Init+0x58>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	4a13      	ldr	r2, [pc, #76]	@ (80006dc <DWT_Init+0x58>)
 800068e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000692:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <DWT_Init+0x58>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	4a10      	ldr	r2, [pc, #64]	@ (80006dc <DWT_Init+0x58>)
 800069a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800069e:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <DWT_Init+0x5c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0e      	ldr	r2, [pc, #56]	@ (80006e0 <DWT_Init+0x5c>)
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <DWT_Init+0x5c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a0b      	ldr	r2, [pc, #44]	@ (80006e0 <DWT_Init+0x5c>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <DWT_Init+0x5c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80006be:	bf00      	nop
    __ASM volatile ("NOP");
 80006c0:	bf00      	nop
    __ASM volatile ("NOP");
 80006c2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <DWT_Init+0x5c>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf0c      	ite	eq
 80006cc:	2301      	moveq	r3, #1
 80006ce:	2300      	movne	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000edf0 	.word	0xe000edf0
 80006e0:	e0001000 	.word	0xe0001000

080006e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e4:	480d      	ldr	r0, [pc, #52]	@ (800071c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e8:	f7ff ffc6 	bl	8000678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	@ (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	@ (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	@ (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	@ (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000712:	f000 f811 	bl	8000738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000716:	f7ff fd7f 	bl	8000218 <main>

0800071a <LoopForever>:

LoopForever:
  b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
  ldr   r0, =_estack
 800071c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000728:	080007c0 	.word	0x080007c0
  ldr r2, =_sbss
 800072c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000730:	20000020 	.word	0x20000020

08000734 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC_IRQHandler>
	...

08000738 <__libc_init_array>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	4d0d      	ldr	r5, [pc, #52]	@ (8000770 <__libc_init_array+0x38>)
 800073c:	4c0d      	ldr	r4, [pc, #52]	@ (8000774 <__libc_init_array+0x3c>)
 800073e:	1b64      	subs	r4, r4, r5
 8000740:	10a4      	asrs	r4, r4, #2
 8000742:	2600      	movs	r6, #0
 8000744:	42a6      	cmp	r6, r4
 8000746:	d109      	bne.n	800075c <__libc_init_array+0x24>
 8000748:	4d0b      	ldr	r5, [pc, #44]	@ (8000778 <__libc_init_array+0x40>)
 800074a:	4c0c      	ldr	r4, [pc, #48]	@ (800077c <__libc_init_array+0x44>)
 800074c:	f000 f818 	bl	8000780 <_init>
 8000750:	1b64      	subs	r4, r4, r5
 8000752:	10a4      	asrs	r4, r4, #2
 8000754:	2600      	movs	r6, #0
 8000756:	42a6      	cmp	r6, r4
 8000758:	d105      	bne.n	8000766 <__libc_init_array+0x2e>
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000760:	4798      	blx	r3
 8000762:	3601      	adds	r6, #1
 8000764:	e7ee      	b.n	8000744 <__libc_init_array+0xc>
 8000766:	f855 3b04 	ldr.w	r3, [r5], #4
 800076a:	4798      	blx	r3
 800076c:	3601      	adds	r6, #1
 800076e:	e7f2      	b.n	8000756 <__libc_init_array+0x1e>
 8000770:	080007b8 	.word	0x080007b8
 8000774:	080007b8 	.word	0x080007b8
 8000778:	080007b8 	.word	0x080007b8
 800077c:	080007bc 	.word	0x080007bc

08000780 <_init>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	bf00      	nop
 8000784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000786:	bc08      	pop	{r3}
 8000788:	469e      	mov	lr, r3
 800078a:	4770      	bx	lr

0800078c <_fini>:
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	bf00      	nop
 8000790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000792:	bc08      	pop	{r3}
 8000794:	469e      	mov	lr, r3
 8000796:	4770      	bx	lr
